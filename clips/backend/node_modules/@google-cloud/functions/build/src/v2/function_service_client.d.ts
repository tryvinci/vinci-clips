import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, IamClient, IamProtos, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Google Cloud Functions is used to deploy functions that are executed by
 *  Google in response to various events. Data connected with that event is
 *  passed to a function as the input data.
 *
 *  A **function** is a resource which describes a function that should be
 *  executed and how it is triggered.
 * @class
 * @memberof v2
 */
export declare class FunctionServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    private _log;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    iamClient: IamClient;
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    functionServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of FunctionServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new FunctionServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Returns a function with the given name from the requested project.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the function which details should be obtained.
     * @param {string} [request.revision]
     *   Optional. The optional version of the 1st gen function whose details should
     *   be obtained. The version of a 1st gen function is an integer that starts
     *   from 1 and gets incremented on redeployments. GCF may keep historical
     *   configs for old versions of 1st gen function. This field can be specified
     *   to fetch the historical configs. This field is valid only for GCF 1st gen
     *   function.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.functions.v2.Function|Function}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/function_service.get_function.js</caption>
     * region_tag:cloudfunctions_v2_generated_FunctionService_GetFunction_async
     */
    getFunction(request?: protos.google.cloud.functions.v2.IGetFunctionRequest, options?: CallOptions): Promise<[
        protos.google.cloud.functions.v2.IFunction,
        protos.google.cloud.functions.v2.IGetFunctionRequest | undefined,
        {} | undefined
    ]>;
    getFunction(request: protos.google.cloud.functions.v2.IGetFunctionRequest, options: CallOptions, callback: Callback<protos.google.cloud.functions.v2.IFunction, protos.google.cloud.functions.v2.IGetFunctionRequest | null | undefined, {} | null | undefined>): void;
    getFunction(request: protos.google.cloud.functions.v2.IGetFunctionRequest, callback: Callback<protos.google.cloud.functions.v2.IFunction, protos.google.cloud.functions.v2.IGetFunctionRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns a signed URL for uploading a function source code.
     * For more information about the signed URL usage see:
     * https://cloud.google.com/storage/docs/access-control/signed-urls.
     * Once the function source code upload is complete, the used signed
     * URL should be provided in CreateFunction or UpdateFunction request
     * as a reference to the function source code.
     *
     * When uploading source code to the generated signed URL, please follow
     * these restrictions:
     *
     * * Source file type should be a zip file.
     * * No credentials should be attached - the signed URLs provide access to the
     *   target bucket using internal service identity; if credentials were
     *   attached, the identity from the credentials would be used, but that
     *   identity does not have permissions to upload files to the URL.
     *
     * When making a HTTP PUT request, specify this header:
     *
     * * `content-type: application/zip`
     *
     * Do not specify this header:
     *
     * * `Authorization: Bearer YOUR_TOKEN`
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location in which the Google Cloud Storage signed
     *   URL should be generated, specified in the format `projects/* /locations/*`.
     * @param {string} request.kmsKeyName
     *   Resource name of a KMS crypto key (managed by the user) used to
     *   encrypt/decrypt function source code objects in intermediate Cloud Storage
     *   buckets. When you generate an upload url and upload your source code, it
     *   gets copied to an intermediate Cloud Storage bucket. The source code is
     *   then copied to a versioned directory in the sources bucket in the consumer
     *   project during the function deployment.
     *
     *   It must match the pattern
     *   `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
     *
     *   The Google Cloud Functions service account
     *   (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) must be
     *   granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter
     *   (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the
     *   Key/KeyRing/Project/Organization (least access preferred).
     * @param {google.cloud.functions.v2.Environment} request.environment
     *   The function environment the generated upload url will be used for.
     *   The upload url for 2nd Gen functions can also be used for 1st gen
     *   functions, but not vice versa. If not specified, 2nd generation-style
     *   upload URLs are generated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.functions.v2.GenerateUploadUrlResponse|GenerateUploadUrlResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/function_service.generate_upload_url.js</caption>
     * region_tag:cloudfunctions_v2_generated_FunctionService_GenerateUploadUrl_async
     */
    generateUploadUrl(request?: protos.google.cloud.functions.v2.IGenerateUploadUrlRequest, options?: CallOptions): Promise<[
        protos.google.cloud.functions.v2.IGenerateUploadUrlResponse,
        protos.google.cloud.functions.v2.IGenerateUploadUrlRequest | undefined,
        {} | undefined
    ]>;
    generateUploadUrl(request: protos.google.cloud.functions.v2.IGenerateUploadUrlRequest, options: CallOptions, callback: Callback<protos.google.cloud.functions.v2.IGenerateUploadUrlResponse, protos.google.cloud.functions.v2.IGenerateUploadUrlRequest | null | undefined, {} | null | undefined>): void;
    generateUploadUrl(request: protos.google.cloud.functions.v2.IGenerateUploadUrlRequest, callback: Callback<protos.google.cloud.functions.v2.IGenerateUploadUrlResponse, protos.google.cloud.functions.v2.IGenerateUploadUrlRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns a signed URL for downloading deployed function source code.
     * The URL is only valid for a limited period and should be used within
     * 30 minutes of generation.
     * For more information about the signed URL usage see:
     * https://cloud.google.com/storage/docs/access-control/signed-urls
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of function for which source code Google Cloud Storage
     *   signed URL should be generated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.functions.v2.GenerateDownloadUrlResponse|GenerateDownloadUrlResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/function_service.generate_download_url.js</caption>
     * region_tag:cloudfunctions_v2_generated_FunctionService_GenerateDownloadUrl_async
     */
    generateDownloadUrl(request?: protos.google.cloud.functions.v2.IGenerateDownloadUrlRequest, options?: CallOptions): Promise<[
        protos.google.cloud.functions.v2.IGenerateDownloadUrlResponse,
        protos.google.cloud.functions.v2.IGenerateDownloadUrlRequest | undefined,
        {} | undefined
    ]>;
    generateDownloadUrl(request: protos.google.cloud.functions.v2.IGenerateDownloadUrlRequest, options: CallOptions, callback: Callback<protos.google.cloud.functions.v2.IGenerateDownloadUrlResponse, protos.google.cloud.functions.v2.IGenerateDownloadUrlRequest | null | undefined, {} | null | undefined>): void;
    generateDownloadUrl(request: protos.google.cloud.functions.v2.IGenerateDownloadUrlRequest, callback: Callback<protos.google.cloud.functions.v2.IGenerateDownloadUrlResponse, protos.google.cloud.functions.v2.IGenerateDownloadUrlRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns a list of runtimes that are supported for the requested project.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the runtimes should be
     *   listed, specified in the format `projects/* /locations/*`
     * @param {string} request.filter
     *   The filter for Runtimes that match the filter expression,
     *   following the syntax outlined in https://google.aip.dev/160.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.functions.v2.ListRuntimesResponse|ListRuntimesResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/function_service.list_runtimes.js</caption>
     * region_tag:cloudfunctions_v2_generated_FunctionService_ListRuntimes_async
     */
    listRuntimes(request?: protos.google.cloud.functions.v2.IListRuntimesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.functions.v2.IListRuntimesResponse,
        protos.google.cloud.functions.v2.IListRuntimesRequest | undefined,
        {} | undefined
    ]>;
    listRuntimes(request: protos.google.cloud.functions.v2.IListRuntimesRequest, options: CallOptions, callback: Callback<protos.google.cloud.functions.v2.IListRuntimesResponse, protos.google.cloud.functions.v2.IListRuntimesRequest | null | undefined, {} | null | undefined>): void;
    listRuntimes(request: protos.google.cloud.functions.v2.IListRuntimesRequest, callback: Callback<protos.google.cloud.functions.v2.IListRuntimesResponse, protos.google.cloud.functions.v2.IListRuntimesRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new function. If a function with the given name already exists in
     * the specified project, the long running operation will return
     * `ALREADY_EXISTS` error.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location in which the function should be created,
     *   specified in the format `projects/* /locations/*`
     * @param {google.cloud.functions.v2.Function} request.function
     *   Required. Function to be created.
     * @param {string} request.functionId
     *   The ID to use for the function, which will become the final component of
     *   the function's resource name.
     *
     *   This value should be 4-63 characters, and valid characters
     *   are /{@link protos.0-9|a-z}-/.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/function_service.create_function.js</caption>
     * region_tag:cloudfunctions_v2_generated_FunctionService_CreateFunction_async
     */
    createFunction(request?: protos.google.cloud.functions.v2.ICreateFunctionRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.functions.v2.IFunction, protos.google.cloud.functions.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createFunction(request: protos.google.cloud.functions.v2.ICreateFunctionRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.functions.v2.IFunction, protos.google.cloud.functions.v2.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createFunction(request: protos.google.cloud.functions.v2.ICreateFunctionRequest, callback: Callback<LROperation<protos.google.cloud.functions.v2.IFunction, protos.google.cloud.functions.v2.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createFunction()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/function_service.create_function.js</caption>
     * region_tag:cloudfunctions_v2_generated_FunctionService_CreateFunction_async
     */
    checkCreateFunctionProgress(name: string): Promise<LROperation<protos.google.cloud.functions.v2.Function, protos.google.cloud.functions.v2.OperationMetadata>>;
    /**
     * Updates existing function.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.functions.v2.Function} request.function
     *   Required. New version of the function.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   The list of fields to be updated.
     *   If no field mask is provided, all fields will be updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/function_service.update_function.js</caption>
     * region_tag:cloudfunctions_v2_generated_FunctionService_UpdateFunction_async
     */
    updateFunction(request?: protos.google.cloud.functions.v2.IUpdateFunctionRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.functions.v2.IFunction, protos.google.cloud.functions.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateFunction(request: protos.google.cloud.functions.v2.IUpdateFunctionRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.functions.v2.IFunction, protos.google.cloud.functions.v2.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateFunction(request: protos.google.cloud.functions.v2.IUpdateFunctionRequest, callback: Callback<LROperation<protos.google.cloud.functions.v2.IFunction, protos.google.cloud.functions.v2.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateFunction()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/function_service.update_function.js</caption>
     * region_tag:cloudfunctions_v2_generated_FunctionService_UpdateFunction_async
     */
    checkUpdateFunctionProgress(name: string): Promise<LROperation<protos.google.cloud.functions.v2.Function, protos.google.cloud.functions.v2.OperationMetadata>>;
    /**
     * Deletes a function with the given name from the specified project. If the
     * given function is used by some trigger, the trigger will be updated to
     * remove this function.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the function which should be deleted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/function_service.delete_function.js</caption>
     * region_tag:cloudfunctions_v2_generated_FunctionService_DeleteFunction_async
     */
    deleteFunction(request?: protos.google.cloud.functions.v2.IDeleteFunctionRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.functions.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteFunction(request: protos.google.cloud.functions.v2.IDeleteFunctionRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.functions.v2.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteFunction(request: protos.google.cloud.functions.v2.IDeleteFunctionRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.functions.v2.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteFunction()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/function_service.delete_function.js</caption>
     * region_tag:cloudfunctions_v2_generated_FunctionService_DeleteFunction_async
     */
    checkDeleteFunctionProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.functions.v2.OperationMetadata>>;
    /**
    * Returns a list of functions that belong to the requested project.
    *
    * @param {Object} request
    *   The request object that will be sent.
    * @param {string} request.parent
    *   Required. The project and location from which the function should be
    *   listed, specified in the format `projects/* /locations/*` If you want to
    *   list functions in all locations, use "-" in place of a location. When
    *   listing functions in all locations, if one or more location(s) are
    *   unreachable, the response will contain functions from all reachable
    *   locations along with the names of any unreachable locations.
    * @param {number} request.pageSize
    *   Maximum number of functions to return per call. The largest allowed
    *   page_size is 1,000, if the page_size is omitted or specified as greater
    *   than 1,000 then it will be replaced as 1,000. The size of the list
    *   response can be less than specified when used with filters.
    * @param {string} request.pageToken
    *   The value returned by the last
    *   `ListFunctionsResponse`; indicates that
    *   this is a continuation of a prior `ListFunctions` call, and that the
    *   system should return the next page of data.
    * @param {string} request.filter
    *   The filter for Functions that match the filter expression,
    *   following the syntax outlined in https://google.aip.dev/160.
    * @param {string} request.orderBy
    *   The sorting order of the resources returned. Value should be a comma
    *   separated list of fields. The default sorting order is ascending.
    *   See https://google.aip.dev/132#ordering.
    * @param {object} [options]
    *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
    * @returns {Promise} - The promise which resolves to an array.
    *   The first element of the array is Array of {@link protos.google.cloud.functions.v2.Function|Function}.
    *   The client library will perform auto-pagination by default: it will call the API as many
    *   times as needed and will merge results from all the pages into this array.
    *   Note that it can affect your quota.
    *   We recommend using `listFunctionsAsync()`
    *   method described below for async iteration which you can stop as needed.
    *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
    *   for more details and examples.
    */
    listFunctions(request?: protos.google.cloud.functions.v2.IListFunctionsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.functions.v2.IFunction[],
        protos.google.cloud.functions.v2.IListFunctionsRequest | null,
        protos.google.cloud.functions.v2.IListFunctionsResponse
    ]>;
    listFunctions(request: protos.google.cloud.functions.v2.IListFunctionsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.functions.v2.IListFunctionsRequest, protos.google.cloud.functions.v2.IListFunctionsResponse | null | undefined, protos.google.cloud.functions.v2.IFunction>): void;
    listFunctions(request: protos.google.cloud.functions.v2.IListFunctionsRequest, callback: PaginationCallback<protos.google.cloud.functions.v2.IListFunctionsRequest, protos.google.cloud.functions.v2.IListFunctionsResponse | null | undefined, protos.google.cloud.functions.v2.IFunction>): void;
    /**
     * Equivalent to `listFunctions`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the function should be
     *   listed, specified in the format `projects/* /locations/*` If you want to
     *   list functions in all locations, use "-" in place of a location. When
     *   listing functions in all locations, if one or more location(s) are
     *   unreachable, the response will contain functions from all reachable
     *   locations along with the names of any unreachable locations.
     * @param {number} request.pageSize
     *   Maximum number of functions to return per call. The largest allowed
     *   page_size is 1,000, if the page_size is omitted or specified as greater
     *   than 1,000 then it will be replaced as 1,000. The size of the list
     *   response can be less than specified when used with filters.
     * @param {string} request.pageToken
     *   The value returned by the last
     *   `ListFunctionsResponse`; indicates that
     *   this is a continuation of a prior `ListFunctions` call, and that the
     *   system should return the next page of data.
     * @param {string} request.filter
     *   The filter for Functions that match the filter expression,
     *   following the syntax outlined in https://google.aip.dev/160.
     * @param {string} request.orderBy
     *   The sorting order of the resources returned. Value should be a comma
     *   separated list of fields. The default sorting order is ascending.
     *   See https://google.aip.dev/132#ordering.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.functions.v2.Function|Function} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listFunctionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listFunctionsStream(request?: protos.google.cloud.functions.v2.IListFunctionsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listFunctions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the function should be
     *   listed, specified in the format `projects/* /locations/*` If you want to
     *   list functions in all locations, use "-" in place of a location. When
     *   listing functions in all locations, if one or more location(s) are
     *   unreachable, the response will contain functions from all reachable
     *   locations along with the names of any unreachable locations.
     * @param {number} request.pageSize
     *   Maximum number of functions to return per call. The largest allowed
     *   page_size is 1,000, if the page_size is omitted or specified as greater
     *   than 1,000 then it will be replaced as 1,000. The size of the list
     *   response can be less than specified when used with filters.
     * @param {string} request.pageToken
     *   The value returned by the last
     *   `ListFunctionsResponse`; indicates that
     *   this is a continuation of a prior `ListFunctions` call, and that the
     *   system should return the next page of data.
     * @param {string} request.filter
     *   The filter for Functions that match the filter expression,
     *   following the syntax outlined in https://google.aip.dev/160.
     * @param {string} request.orderBy
     *   The sorting order of the resources returned. Value should be a comma
     *   separated list of fields. The default sorting order is ascending.
     *   See https://google.aip.dev/132#ordering.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.functions.v2.Function|Function}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/function_service.list_functions.js</caption>
     * region_tag:cloudfunctions_v2_generated_FunctionService_ListFunctions_async
     */
    listFunctionsAsync(request?: protos.google.cloud.functions.v2.IListFunctionsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.functions.v2.IFunction>;
    /**
     * Gets the access control policy for a resource. Returns an empty policy
     * if the resource exists and does not have a policy set.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {Object} [request.options]
     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
     *   `GetIamPolicy`. This field is only used by Cloud IAM.
     *
     *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    getIamPolicy(request: IamProtos.google.iam.v1.GetIamPolicyRequest, options?: gax.CallOptions | Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined, {} | null | undefined>, callback?: Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined, {} | null | undefined>): Promise<[IamProtos.google.iam.v1.Policy]>;
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    setIamPolicy(request: IamProtos.google.iam.v1.SetIamPolicyRequest, options?: gax.CallOptions | Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined, {} | null | undefined>, callback?: Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined, {} | null | undefined>): Promise<[IamProtos.google.iam.v1.Policy]>;
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     */
    testIamPermissions(request: IamProtos.google.iam.v1.TestIamPermissionsRequest, options?: gax.CallOptions | Callback<IamProtos.google.iam.v1.TestIamPermissionsResponse, IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined, {} | null | undefined>, callback?: Callback<IamProtos.google.iam.v1.TestIamPermissionsResponse, IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined, {} | null | undefined>): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]>;
    /**
       * Gets information about a location.
       *
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.name
       *   Resource name for the location.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
       * @returns {Promise} - The promise which resolves to an array.
       *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
       *   for more details and examples.
       * @example
       * ```
       * const [response] = await client.getLocation(request);
       * ```
       */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
       * Lists information about the supported locations for this service. Returns an iterable object.
       *
       * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.name
       *   The resource that owns the locations collection, if applicable.
       * @param {string} request.filter
       *   The standard list filter.
       * @param {number} request.pageSize
       *   The standard list page size.
       * @param {string} request.pageToken
       *   The standard list page token.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
       * @returns {Object}
       *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
       *   When you iterate the returned iterable, each element will be an object representing
       *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
       *   so you can stop the iteration when you don't need more results.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
       *   for more details and examples.
       * @example
       * ```
       * const iterable = client.listLocationsAsync(request);
       * for await (const response of iterable) {
       *   // process response
       * }
       * ```
       */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
       * Gets the latest state of a long-running operation.  Clients can use this
       * method to poll the operation result at intervals as recommended by the API
       * service.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation resource.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       *   e.g, timeout, retries, paginations, etc. See {@link
       *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
       *   for the details.
       * @param {function(?Error, ?Object)=} callback
       *   The function which will be called with the result of the API call.
       *
       *   The second parameter to the callback is an object representing
       *   {@link google.longrunning.Operation | google.longrunning.Operation}.
       * @return {Promise} - The promise which resolves to an array.
       *   The first element of the array is an object representing
       * {@link google.longrunning.Operation | google.longrunning.Operation}.
       * The promise has a method named "cancel" which cancels the ongoing API call.
       *
       * @example
       * ```
       * const client = longrunning.operationsClient();
       * const name = '';
       * const [response] = await client.getOperation({name});
       * // doThingsWith(response)
       * ```
       */
    getOperation(request: protos.google.longrunning.GetOperationRequest, optionsOrCallback?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.IOperation>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, optionsOrCallback?: gax.CallOptions | Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, optionsOrCallback?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified build resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} build
     * @returns {string} Resource name string.
     */
    buildPath(project: string, location: string, build: string): string;
    /**
     * Parse the project from Build resource.
     *
     * @param {string} buildName
     *   A fully-qualified path representing Build resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBuildName(buildName: string): string | number;
    /**
     * Parse the location from Build resource.
     *
     * @param {string} buildName
     *   A fully-qualified path representing Build resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromBuildName(buildName: string): string | number;
    /**
     * Parse the build from Build resource.
     *
     * @param {string} buildName
     *   A fully-qualified path representing Build resource.
     * @returns {string} A string representing the build.
     */
    matchBuildFromBuildName(buildName: string): string | number;
    /**
     * Return a fully-qualified channel resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} channel
     * @returns {string} Resource name string.
     */
    channelPath(project: string, location: string, channel: string): string;
    /**
     * Parse the project from Channel resource.
     *
     * @param {string} channelName
     *   A fully-qualified path representing Channel resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromChannelName(channelName: string): string | number;
    /**
     * Parse the location from Channel resource.
     *
     * @param {string} channelName
     *   A fully-qualified path representing Channel resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromChannelName(channelName: string): string | number;
    /**
     * Parse the channel from Channel resource.
     *
     * @param {string} channelName
     *   A fully-qualified path representing Channel resource.
     * @returns {string} A string representing the channel.
     */
    matchChannelFromChannelName(channelName: string): string | number;
    /**
     * Return a fully-qualified connector resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} connector
     * @returns {string} Resource name string.
     */
    connectorPath(project: string, location: string, connector: string): string;
    /**
     * Parse the project from Connector resource.
     *
     * @param {string} connectorName
     *   A fully-qualified path representing Connector resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromConnectorName(connectorName: string): string | number;
    /**
     * Parse the location from Connector resource.
     *
     * @param {string} connectorName
     *   A fully-qualified path representing Connector resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromConnectorName(connectorName: string): string | number;
    /**
     * Parse the connector from Connector resource.
     *
     * @param {string} connectorName
     *   A fully-qualified path representing Connector resource.
     * @returns {string} A string representing the connector.
     */
    matchConnectorFromConnectorName(connectorName: string): string | number;
    /**
     * Return a fully-qualified cryptoKey resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} key_ring
     * @param {string} crypto_key
     * @returns {string} Resource name string.
     */
    cryptoKeyPath(project: string, location: string, keyRing: string, cryptoKey: string): string;
    /**
     * Parse the project from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCryptoKeyName(cryptoKeyName: string): string | number;
    /**
     * Parse the location from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCryptoKeyName(cryptoKeyName: string): string | number;
    /**
     * Parse the key_ring from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the key_ring.
     */
    matchKeyRingFromCryptoKeyName(cryptoKeyName: string): string | number;
    /**
     * Parse the crypto_key from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the crypto_key.
     */
    matchCryptoKeyFromCryptoKeyName(cryptoKeyName: string): string | number;
    /**
     * Return a fully-qualified function resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} functionParam
     * @returns {string} Resource name string.
     */
    functionPath(project: string, location: string, functionParam: string): string;
    /**
     * Parse the project from Function resource.
     *
     * @param {string} functionName
     *   A fully-qualified path representing Function resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromFunctionName(functionName: string): string | number;
    /**
     * Parse the location from Function resource.
     *
     * @param {string} functionName
     *   A fully-qualified path representing Function resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFunctionName(functionName: string): string | number;
    /**
     * Parse the function from Function resource.
     *
     * @param {string} functionName
     *   A fully-qualified path representing Function resource.
     * @returns {string} A string representing the function.
     */
    matchFunctionFromFunctionName(functionName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified repository resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} repository
     * @returns {string} Resource name string.
     */
    repositoryPath(project: string, location: string, repository: string): string;
    /**
     * Parse the project from Repository resource.
     *
     * @param {string} repositoryName
     *   A fully-qualified path representing Repository resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromRepositoryName(repositoryName: string): string | number;
    /**
     * Parse the location from Repository resource.
     *
     * @param {string} repositoryName
     *   A fully-qualified path representing Repository resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromRepositoryName(repositoryName: string): string | number;
    /**
     * Parse the repository from Repository resource.
     *
     * @param {string} repositoryName
     *   A fully-qualified path representing Repository resource.
     * @returns {string} A string representing the repository.
     */
    matchRepositoryFromRepositoryName(repositoryName: string): string | number;
    /**
     * Return a fully-qualified service resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} service
     * @returns {string} Resource name string.
     */
    servicePath(project: string, location: string, service: string): string;
    /**
     * Parse the project from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromServiceName(serviceName: string): string | number;
    /**
     * Parse the location from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromServiceName(serviceName: string): string | number;
    /**
     * Parse the service from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromServiceName(serviceName: string): string | number;
    /**
     * Return a fully-qualified topic resource name string.
     *
     * @param {string} project
     * @param {string} topic
     * @returns {string} Resource name string.
     */
    topicPath(project: string, topic: string): string;
    /**
     * Parse the project from Topic resource.
     *
     * @param {string} topicName
     *   A fully-qualified path representing Topic resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTopicName(topicName: string): string | number;
    /**
     * Parse the topic from Topic resource.
     *
     * @param {string} topicName
     *   A fully-qualified path representing Topic resource.
     * @returns {string} A string representing the topic.
     */
    matchTopicFromTopicName(topicName: string): string | number;
    /**
     * Return a fully-qualified trigger resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} trigger
     * @returns {string} Resource name string.
     */
    triggerPath(project: string, location: string, trigger: string): string;
    /**
     * Parse the project from Trigger resource.
     *
     * @param {string} triggerName
     *   A fully-qualified path representing Trigger resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTriggerName(triggerName: string): string | number;
    /**
     * Parse the location from Trigger resource.
     *
     * @param {string} triggerName
     *   A fully-qualified path representing Trigger resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTriggerName(triggerName: string): string | number;
    /**
     * Parse the trigger from Trigger resource.
     *
     * @param {string} triggerName
     *   A fully-qualified path representing Trigger resource.
     * @returns {string} A string representing the trigger.
     */
    matchTriggerFromTriggerName(triggerName: string): string | number;
    /**
     * Return a fully-qualified workerPool resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} worker_pool
     * @returns {string} Resource name string.
     */
    workerPoolPath(project: string, location: string, workerPool: string): string;
    /**
     * Parse the project from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWorkerPoolName(workerPoolName: string): string | number;
    /**
     * Parse the location from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWorkerPoolName(workerPoolName: string): string | number;
    /**
     * Parse the worker_pool from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the worker_pool.
     */
    matchWorkerPoolFromWorkerPoolName(workerPoolName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
