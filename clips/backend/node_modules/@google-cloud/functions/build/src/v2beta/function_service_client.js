"use strict";
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionServiceClient = void 0;
const jsonProtos = require("../../protos/protos.json");
const google_gax_1 = require("google-gax");
/**
 * Client JSON configuration object, loaded from
 * `src/v2beta/function_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./function_service_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Google Cloud Functions is used to deploy functions that are executed by
 *  Google in response to various events. Data connected with that event is
 *  passed to a function as the input data.
 *
 *  A **function** is a resource which describes a function that should be
 *  executed and how it is triggered.
 * @class
 * @memberof v2beta
 */
class FunctionServiceClient {
    _terminated = false;
    _opts;
    _providedCustomServicePath;
    _gaxModule;
    _gaxGrpc;
    _protos;
    _defaults;
    _universeDomain;
    _servicePath;
    _log = google_gax_1.loggingUtils.log('functions');
    auth;
    descriptors = {
        page: {},
        stream: {},
        longrunning: {},
        batching: {},
    };
    warn;
    innerApiCalls;
    iamClient;
    locationsClient;
    pathTemplates;
    operationsClient;
    functionServiceStub;
    /**
     * Construct an instance of FunctionServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new FunctionServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
            throw new Error('Please set either universe_domain or universeDomain, but not both.');
        }
        const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
        this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
        this._servicePath = 'cloudfunctions.' + this._universeDomain;
        const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
        this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
        const port = opts?.port || staticMembers.port;
        const clientConfig = opts?.clientConfig ?? {};
        const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== this._servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = this._servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === this._servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);
        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);
        // Determine the client header string.
        const clientHeader = [
            `gax/${this._gaxModule.version}`,
            `gapic/${version}`,
        ];
        if (typeof process === 'object' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            buildPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/builds/{build}'),
            channelPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/channels/{channel}'),
            connectorPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/connectors/{connector}'),
            cryptoKeyPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}'),
            functionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/functions/{function}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            repositoryPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/repositories/{repository}'),
            servicePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/services/{service}'),
            topicPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/topics/{topic}'),
            triggerPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/triggers/{trigger}'),
            workerPoolPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/workerPools/{worker_pool}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listFunctions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'functions')
        };
        const protoFilesRoot = this._gaxModule.protobufFromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [{ selector: 'google.cloud.location.Locations.ListLocations', get: '/v2beta/{name=projects/*}/locations', }, { selector: 'google.iam.v1.IAMPolicy.GetIamPolicy', get: '/v2beta/{resource=projects/*/locations/*/functions/*}:getIamPolicy', }, { selector: 'google.iam.v1.IAMPolicy.SetIamPolicy', post: '/v2beta/{resource=projects/*/locations/*/functions/*}:setIamPolicy', body: '*', }, { selector: 'google.iam.v1.IAMPolicy.TestIamPermissions', post: '/v2beta/{resource=projects/*/locations/*/functions/*}:testIamPermissions', body: '*', }, { selector: 'google.longrunning.Operations.GetOperation', get: '/v2beta/{name=projects/*/locations/*/operations/*}', }, { selector: 'google.longrunning.Operations.ListOperations', get: '/v2beta/{name=projects/*/locations/*}/operations', }];
        }
        this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
        const createFunctionResponse = protoFilesRoot.lookup('.google.cloud.functions.v2beta.Function');
        const createFunctionMetadata = protoFilesRoot.lookup('.google.cloud.functions.v2beta.OperationMetadata');
        const updateFunctionResponse = protoFilesRoot.lookup('.google.cloud.functions.v2beta.Function');
        const updateFunctionMetadata = protoFilesRoot.lookup('.google.cloud.functions.v2beta.OperationMetadata');
        const deleteFunctionResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteFunctionMetadata = protoFilesRoot.lookup('.google.cloud.functions.v2beta.OperationMetadata');
        this.descriptors.longrunning = {
            createFunction: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createFunctionResponse.decode.bind(createFunctionResponse), createFunctionMetadata.decode.bind(createFunctionMetadata)),
            updateFunction: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateFunctionResponse.decode.bind(updateFunctionResponse), updateFunctionMetadata.decode.bind(updateFunctionMetadata)),
            deleteFunction: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteFunctionResponse.decode.bind(deleteFunctionResponse), deleteFunctionMetadata.decode.bind(deleteFunctionMetadata))
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.functions.v2beta.FunctionService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.functionServiceStub) {
            return this.functionServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.functions.v2beta.FunctionService.
        this.functionServiceStub = this._gaxGrpc.createStub(this._opts.fallback ?
            this._protos.lookupService('google.cloud.functions.v2beta.FunctionService') :
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this._protos.google.cloud.functions.v2beta.FunctionService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const functionServiceStubMethods = ['getFunction', 'listFunctions', 'createFunction', 'updateFunction', 'deleteFunction', 'generateUploadUrl', 'generateDownloadUrl', 'listRuntimes'];
        for (const methodName of functionServiceStubMethods) {
            const callPromise = this.functionServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.functionServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'cloudfunctions.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'cloudfunctions.googleapis.com';
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint() {
        return this._servicePath;
    }
    get universeDomain() {
        return this._universeDomain;
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/cloud-platform'
        ];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    getFunction(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        this.initialize().catch(err => { throw err; });
        this._log.info('getFunction request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('getFunction response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls.getFunction(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('getFunction response %j', response);
            return [response, options, rawResponse];
        }).catch((error) => {
            if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
                const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
                error.statusDetails = (0, google_gax_1.decodeAnyProtosInArray)(error.statusDetails, protos);
            }
            throw error;
        });
    }
    generateUploadUrl(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': request.parent ?? '',
        });
        this.initialize().catch(err => { throw err; });
        this._log.info('generateUploadUrl request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('generateUploadUrl response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls.generateUploadUrl(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('generateUploadUrl response %j', response);
            return [response, options, rawResponse];
        }).catch((error) => {
            if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
                const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
                error.statusDetails = (0, google_gax_1.decodeAnyProtosInArray)(error.statusDetails, protos);
            }
            throw error;
        });
    }
    generateDownloadUrl(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        this.initialize().catch(err => { throw err; });
        this._log.info('generateDownloadUrl request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('generateDownloadUrl response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls.generateDownloadUrl(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('generateDownloadUrl response %j', response);
            return [response, options, rawResponse];
        }).catch((error) => {
            if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
                const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
                error.statusDetails = (0, google_gax_1.decodeAnyProtosInArray)(error.statusDetails, protos);
            }
            throw error;
        });
    }
    listRuntimes(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': request.parent ?? '',
        });
        this.initialize().catch(err => { throw err; });
        this._log.info('listRuntimes request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('listRuntimes response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls.listRuntimes(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('listRuntimes response %j', response);
            return [response, options, rawResponse];
        }).catch((error) => {
            if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
                const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
                error.statusDetails = (0, google_gax_1.decodeAnyProtosInArray)(error.statusDetails, protos);
            }
            throw error;
        });
    }
    createFunction(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': request.parent ?? '',
        });
        this.initialize().catch(err => { throw err; });
        const wrappedCallback = callback
            ? (error, response, rawResponse, _) => {
                this._log.info('createFunction response %j', rawResponse);
                callback(error, response, rawResponse, _); // We verified callback above.
            }
            : undefined;
        this._log.info('createFunction request %j', request);
        return this.innerApiCalls.createFunction(request, options, wrappedCallback)
            ?.then(([response, rawResponse, _]) => {
            this._log.info('createFunction response %j', rawResponse);
            return [response, rawResponse, _];
        });
    }
    /**
     * Check the status of the long running operation returned by `createFunction()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/function_service.create_function.js</caption>
     * region_tag:cloudfunctions_v2beta_generated_FunctionService_CreateFunction_async
     */
    async checkCreateFunctionProgress(name) {
        this._log.info('createFunction long-running');
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createFunction, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateFunction(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'function.name': request.function.name ?? '',
        });
        this.initialize().catch(err => { throw err; });
        const wrappedCallback = callback
            ? (error, response, rawResponse, _) => {
                this._log.info('updateFunction response %j', rawResponse);
                callback(error, response, rawResponse, _); // We verified callback above.
            }
            : undefined;
        this._log.info('updateFunction request %j', request);
        return this.innerApiCalls.updateFunction(request, options, wrappedCallback)
            ?.then(([response, rawResponse, _]) => {
            this._log.info('updateFunction response %j', rawResponse);
            return [response, rawResponse, _];
        });
    }
    /**
     * Check the status of the long running operation returned by `updateFunction()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/function_service.update_function.js</caption>
     * region_tag:cloudfunctions_v2beta_generated_FunctionService_UpdateFunction_async
     */
    async checkUpdateFunctionProgress(name) {
        this._log.info('updateFunction long-running');
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateFunction, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteFunction(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': request.name ?? '',
        });
        this.initialize().catch(err => { throw err; });
        const wrappedCallback = callback
            ? (error, response, rawResponse, _) => {
                this._log.info('deleteFunction response %j', rawResponse);
                callback(error, response, rawResponse, _); // We verified callback above.
            }
            : undefined;
        this._log.info('deleteFunction request %j', request);
        return this.innerApiCalls.deleteFunction(request, options, wrappedCallback)
            ?.then(([response, rawResponse, _]) => {
            this._log.info('deleteFunction response %j', rawResponse);
            return [response, rawResponse, _];
        });
    }
    /**
     * Check the status of the long running operation returned by `deleteFunction()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/function_service.delete_function.js</caption>
     * region_tag:cloudfunctions_v2beta_generated_FunctionService_DeleteFunction_async
     */
    async checkDeleteFunctionProgress(name) {
        this._log.info('deleteFunction long-running');
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteFunction, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listFunctions(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': request.parent ?? '',
        });
        this.initialize().catch(err => { throw err; });
        const wrappedCallback = callback
            ? (error, values, nextPageRequest, rawResponse) => {
                this._log.info('listFunctions values %j', values);
                callback(error, values, nextPageRequest, rawResponse); // We verified callback above.
            }
            : undefined;
        this._log.info('listFunctions request %j', request);
        return this.innerApiCalls
            .listFunctions(request, options, wrappedCallback)
            ?.then(([response, input, output]) => {
            this._log.info('listFunctions values %j', response);
            return [response, input, output];
        });
    }
    /**
     * Equivalent to `listFunctions`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the function should be
     *   listed, specified in the format `projects/* /locations/*` If you want to
     *   list functions in all locations, use "-" in place of a location. When
     *   listing functions in all locations, if one or more location(s) are
     *   unreachable, the response will contain functions from all reachable
     *   locations along with the names of any unreachable locations.
     * @param {number} request.pageSize
     *   Maximum number of functions to return per call. The largest allowed
     *   page_size is 1,000, if the page_size is omitted or specified as greater
     *   than 1,000 then it will be replaced as 1,000. The size of the list
     *   response can be less than specified when used with filters.
     * @param {string} request.pageToken
     *   The value returned by the last
     *   `ListFunctionsResponse`; indicates that
     *   this is a continuation of a prior `ListFunctions` call, and that the
     *   system should return the next page of data.
     * @param {string} request.filter
     *   The filter for Functions that match the filter expression,
     *   following the syntax outlined in https://google.aip.dev/160.
     * @param {string} request.orderBy
     *   The sorting order of the resources returned. Value should be a comma
     *   separated list of fields. The default sorting oder is ascending.
     *   See https://google.aip.dev/132#ordering.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.functions.v2beta.Function|Function} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listFunctionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listFunctionsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': request.parent ?? '',
        });
        const defaultCallSettings = this._defaults['listFunctions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => { throw err; });
        this._log.info('listFunctions stream %j', request);
        return this.descriptors.page.listFunctions.createStream(this.innerApiCalls.listFunctions, request, callSettings);
    }
    /**
     * Equivalent to `listFunctions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the function should be
     *   listed, specified in the format `projects/* /locations/*` If you want to
     *   list functions in all locations, use "-" in place of a location. When
     *   listing functions in all locations, if one or more location(s) are
     *   unreachable, the response will contain functions from all reachable
     *   locations along with the names of any unreachable locations.
     * @param {number} request.pageSize
     *   Maximum number of functions to return per call. The largest allowed
     *   page_size is 1,000, if the page_size is omitted or specified as greater
     *   than 1,000 then it will be replaced as 1,000. The size of the list
     *   response can be less than specified when used with filters.
     * @param {string} request.pageToken
     *   The value returned by the last
     *   `ListFunctionsResponse`; indicates that
     *   this is a continuation of a prior `ListFunctions` call, and that the
     *   system should return the next page of data.
     * @param {string} request.filter
     *   The filter for Functions that match the filter expression,
     *   following the syntax outlined in https://google.aip.dev/160.
     * @param {string} request.orderBy
     *   The sorting order of the resources returned. Value should be a comma
     *   separated list of fields. The default sorting oder is ascending.
     *   See https://google.aip.dev/132#ordering.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.functions.v2beta.Function|Function}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/function_service.list_functions.js</caption>
     * region_tag:cloudfunctions_v2beta_generated_FunctionService_ListFunctions_async
     */
    listFunctionsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': request.parent ?? '',
        });
        const defaultCallSettings = this._defaults['listFunctions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => { throw err; });
        this._log.info('listFunctions iterate %j', request);
        return this.descriptors.page.listFunctions.asyncIterate(this.innerApiCalls['listFunctions'], request, callSettings);
    }
    /**
     * Gets the access control policy for a resource. Returns an empty policy
     * if the resource exists and does not have a policy set.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {Object} [request.options]
     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
     *   `GetIamPolicy`. This field is only used by Cloud IAM.
     *
     *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    getIamPolicy(request, options, callback) {
        return this.iamClient.getIamPolicy(request, options, callback);
    }
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    setIamPolicy(request, options, callback) {
        return this.iamClient.setIamPolicy(request, options, callback);
    }
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     */
    testIamPermissions(request, options, callback) {
        return this.iamClient.testIamPermissions(request, options, callback);
    }
    /**
       * Gets information about a location.
       *
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.name
       *   Resource name for the location.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
       * @returns {Promise} - The promise which resolves to an array.
       *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
       *   for more details and examples.
       * @example
       * ```
       * const [response] = await client.getLocation(request);
       * ```
       */
    getLocation(request, options, callback) {
        return this.locationsClient.getLocation(request, options, callback);
    }
    /**
       * Lists information about the supported locations for this service. Returns an iterable object.
       *
       * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.name
       *   The resource that owns the locations collection, if applicable.
       * @param {string} request.filter
       *   The standard list filter.
       * @param {number} request.pageSize
       *   The standard list page size.
       * @param {string} request.pageToken
       *   The standard list page token.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
       * @returns {Object}
       *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
       *   When you iterate the returned iterable, each element will be an object representing
       *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
       *   so you can stop the iteration when you don't need more results.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
       *   for more details and examples.
       * @example
       * ```
       * const iterable = client.listLocationsAsync(request);
       * for await (const response of iterable) {
       *   // process response
       * }
       * ```
       */
    listLocationsAsync(request, options) {
        return this.locationsClient.listLocationsAsync(request, options);
    }
    /**
       * Gets the latest state of a long-running operation.  Clients can use this
       * method to poll the operation result at intervals as recommended by the API
       * service.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation resource.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       *   e.g, timeout, retries, paginations, etc. See {@link
       *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
       *   for the details.
       * @param {function(?Error, ?Object)=} callback
       *   The function which will be called with the result of the API call.
       *
       *   The second parameter to the callback is an object representing
       *   {@link google.longrunning.Operation | google.longrunning.Operation}.
       * @return {Promise} - The promise which resolves to an array.
       *   The first element of the array is an object representing
       * {@link google.longrunning.Operation | google.longrunning.Operation}.
       * The promise has a method named "cancel" which cancels the ongoing API call.
       *
       * @example
       * ```
       * const client = longrunning.operationsClient();
       * const name = '';
       * const [response] = await client.getOperation({name});
       * // doThingsWith(response)
       * ```
       */
    getOperation(request, optionsOrCallback, callback) {
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: request.name ?? '',
            });
        return this.operationsClient.getOperation(request, options, callback);
    }
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request, options) {
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: request.name ?? '',
            });
        return this.operationsClient.listOperationsAsync(request, options);
    }
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request, optionsOrCallback, callback) {
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: request.name ?? '',
            });
        return this.operationsClient.cancelOperation(request, options, callback);
    }
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request, optionsOrCallback, callback) {
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: request.name ?? '',
            });
        return this.operationsClient.deleteOperation(request, options, callback);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified build resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} build
     * @returns {string} Resource name string.
     */
    buildPath(project, location, build) {
        return this.pathTemplates.buildPathTemplate.render({
            project: project,
            location: location,
            build: build,
        });
    }
    /**
     * Parse the project from Build resource.
     *
     * @param {string} buildName
     *   A fully-qualified path representing Build resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBuildName(buildName) {
        return this.pathTemplates.buildPathTemplate.match(buildName).project;
    }
    /**
     * Parse the location from Build resource.
     *
     * @param {string} buildName
     *   A fully-qualified path representing Build resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromBuildName(buildName) {
        return this.pathTemplates.buildPathTemplate.match(buildName).location;
    }
    /**
     * Parse the build from Build resource.
     *
     * @param {string} buildName
     *   A fully-qualified path representing Build resource.
     * @returns {string} A string representing the build.
     */
    matchBuildFromBuildName(buildName) {
        return this.pathTemplates.buildPathTemplate.match(buildName).build;
    }
    /**
     * Return a fully-qualified channel resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} channel
     * @returns {string} Resource name string.
     */
    channelPath(project, location, channel) {
        return this.pathTemplates.channelPathTemplate.render({
            project: project,
            location: location,
            channel: channel,
        });
    }
    /**
     * Parse the project from Channel resource.
     *
     * @param {string} channelName
     *   A fully-qualified path representing Channel resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromChannelName(channelName) {
        return this.pathTemplates.channelPathTemplate.match(channelName).project;
    }
    /**
     * Parse the location from Channel resource.
     *
     * @param {string} channelName
     *   A fully-qualified path representing Channel resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromChannelName(channelName) {
        return this.pathTemplates.channelPathTemplate.match(channelName).location;
    }
    /**
     * Parse the channel from Channel resource.
     *
     * @param {string} channelName
     *   A fully-qualified path representing Channel resource.
     * @returns {string} A string representing the channel.
     */
    matchChannelFromChannelName(channelName) {
        return this.pathTemplates.channelPathTemplate.match(channelName).channel;
    }
    /**
     * Return a fully-qualified connector resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} connector
     * @returns {string} Resource name string.
     */
    connectorPath(project, location, connector) {
        return this.pathTemplates.connectorPathTemplate.render({
            project: project,
            location: location,
            connector: connector,
        });
    }
    /**
     * Parse the project from Connector resource.
     *
     * @param {string} connectorName
     *   A fully-qualified path representing Connector resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromConnectorName(connectorName) {
        return this.pathTemplates.connectorPathTemplate.match(connectorName).project;
    }
    /**
     * Parse the location from Connector resource.
     *
     * @param {string} connectorName
     *   A fully-qualified path representing Connector resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromConnectorName(connectorName) {
        return this.pathTemplates.connectorPathTemplate.match(connectorName).location;
    }
    /**
     * Parse the connector from Connector resource.
     *
     * @param {string} connectorName
     *   A fully-qualified path representing Connector resource.
     * @returns {string} A string representing the connector.
     */
    matchConnectorFromConnectorName(connectorName) {
        return this.pathTemplates.connectorPathTemplate.match(connectorName).connector;
    }
    /**
     * Return a fully-qualified cryptoKey resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} key_ring
     * @param {string} crypto_key
     * @returns {string} Resource name string.
     */
    cryptoKeyPath(project, location, keyRing, cryptoKey) {
        return this.pathTemplates.cryptoKeyPathTemplate.render({
            project: project,
            location: location,
            key_ring: keyRing,
            crypto_key: cryptoKey,
        });
    }
    /**
     * Parse the project from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCryptoKeyName(cryptoKeyName) {
        return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).project;
    }
    /**
     * Parse the location from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCryptoKeyName(cryptoKeyName) {
        return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).location;
    }
    /**
     * Parse the key_ring from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the key_ring.
     */
    matchKeyRingFromCryptoKeyName(cryptoKeyName) {
        return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).key_ring;
    }
    /**
     * Parse the crypto_key from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the crypto_key.
     */
    matchCryptoKeyFromCryptoKeyName(cryptoKeyName) {
        return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).crypto_key;
    }
    /**
     * Return a fully-qualified function resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} functionParam
     * @returns {string} Resource name string.
     */
    functionPath(project, location, functionParam) {
        return this.pathTemplates.functionPathTemplate.render({
            project: project,
            location: location,
            function: functionParam,
        });
    }
    /**
     * Parse the project from Function resource.
     *
     * @param {string} functionName
     *   A fully-qualified path representing Function resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromFunctionName(functionName) {
        return this.pathTemplates.functionPathTemplate.match(functionName).project;
    }
    /**
     * Parse the location from Function resource.
     *
     * @param {string} functionName
     *   A fully-qualified path representing Function resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFunctionName(functionName) {
        return this.pathTemplates.functionPathTemplate.match(functionName).location;
    }
    /**
     * Parse the function from Function resource.
     *
     * @param {string} functionName
     *   A fully-qualified path representing Function resource.
     * @returns {string} A string representing the function.
     */
    matchFunctionFromFunctionName(functionName) {
        return this.pathTemplates.functionPathTemplate.match(functionName).function;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified repository resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} repository
     * @returns {string} Resource name string.
     */
    repositoryPath(project, location, repository) {
        return this.pathTemplates.repositoryPathTemplate.render({
            project: project,
            location: location,
            repository: repository,
        });
    }
    /**
     * Parse the project from Repository resource.
     *
     * @param {string} repositoryName
     *   A fully-qualified path representing Repository resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromRepositoryName(repositoryName) {
        return this.pathTemplates.repositoryPathTemplate.match(repositoryName).project;
    }
    /**
     * Parse the location from Repository resource.
     *
     * @param {string} repositoryName
     *   A fully-qualified path representing Repository resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromRepositoryName(repositoryName) {
        return this.pathTemplates.repositoryPathTemplate.match(repositoryName).location;
    }
    /**
     * Parse the repository from Repository resource.
     *
     * @param {string} repositoryName
     *   A fully-qualified path representing Repository resource.
     * @returns {string} A string representing the repository.
     */
    matchRepositoryFromRepositoryName(repositoryName) {
        return this.pathTemplates.repositoryPathTemplate.match(repositoryName).repository;
    }
    /**
     * Return a fully-qualified service resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} service
     * @returns {string} Resource name string.
     */
    servicePath(project, location, service) {
        return this.pathTemplates.servicePathTemplate.render({
            project: project,
            location: location,
            service: service,
        });
    }
    /**
     * Parse the project from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromServiceName(serviceName) {
        return this.pathTemplates.servicePathTemplate.match(serviceName).project;
    }
    /**
     * Parse the location from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromServiceName(serviceName) {
        return this.pathTemplates.servicePathTemplate.match(serviceName).location;
    }
    /**
     * Parse the service from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromServiceName(serviceName) {
        return this.pathTemplates.servicePathTemplate.match(serviceName).service;
    }
    /**
     * Return a fully-qualified topic resource name string.
     *
     * @param {string} project
     * @param {string} topic
     * @returns {string} Resource name string.
     */
    topicPath(project, topic) {
        return this.pathTemplates.topicPathTemplate.render({
            project: project,
            topic: topic,
        });
    }
    /**
     * Parse the project from Topic resource.
     *
     * @param {string} topicName
     *   A fully-qualified path representing Topic resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTopicName(topicName) {
        return this.pathTemplates.topicPathTemplate.match(topicName).project;
    }
    /**
     * Parse the topic from Topic resource.
     *
     * @param {string} topicName
     *   A fully-qualified path representing Topic resource.
     * @returns {string} A string representing the topic.
     */
    matchTopicFromTopicName(topicName) {
        return this.pathTemplates.topicPathTemplate.match(topicName).topic;
    }
    /**
     * Return a fully-qualified trigger resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} trigger
     * @returns {string} Resource name string.
     */
    triggerPath(project, location, trigger) {
        return this.pathTemplates.triggerPathTemplate.render({
            project: project,
            location: location,
            trigger: trigger,
        });
    }
    /**
     * Parse the project from Trigger resource.
     *
     * @param {string} triggerName
     *   A fully-qualified path representing Trigger resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTriggerName(triggerName) {
        return this.pathTemplates.triggerPathTemplate.match(triggerName).project;
    }
    /**
     * Parse the location from Trigger resource.
     *
     * @param {string} triggerName
     *   A fully-qualified path representing Trigger resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTriggerName(triggerName) {
        return this.pathTemplates.triggerPathTemplate.match(triggerName).location;
    }
    /**
     * Parse the trigger from Trigger resource.
     *
     * @param {string} triggerName
     *   A fully-qualified path representing Trigger resource.
     * @returns {string} A string representing the trigger.
     */
    matchTriggerFromTriggerName(triggerName) {
        return this.pathTemplates.triggerPathTemplate.match(triggerName).trigger;
    }
    /**
     * Return a fully-qualified workerPool resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} worker_pool
     * @returns {string} Resource name string.
     */
    workerPoolPath(project, location, workerPool) {
        return this.pathTemplates.workerPoolPathTemplate.render({
            project: project,
            location: location,
            worker_pool: workerPool,
        });
    }
    /**
     * Parse the project from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWorkerPoolName(workerPoolName) {
        return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName).project;
    }
    /**
     * Parse the location from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWorkerPoolName(workerPoolName) {
        return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName).location;
    }
    /**
     * Parse the worker_pool from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the worker_pool.
     */
    matchWorkerPoolFromWorkerPoolName(workerPoolName) {
        return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName).worker_pool;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.functionServiceStub && !this._terminated) {
            return this.functionServiceStub.then(stub => {
                this._log.info('ending gRPC channel');
                this._terminated = true;
                stub.close();
                this.iamClient.close().catch(err => { throw err; });
                this.locationsClient.close().catch(err => { throw err; });
                void this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.FunctionServiceClient = FunctionServiceClient;
//# sourceMappingURL=function_service_client.js.map